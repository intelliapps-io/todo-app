# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  assignTaskToUser(taskId: Float!, userEmail: String!): Task!
  createSubtask(data: SubtaskInput!, taskId: Float!): Subtask!
  createTask(data: TaskInput!): Task!
  deleteSubtask(subtaskId: Float!): Boolean!
  deleteTask(id: Float!): Boolean!
  login(email: String!, password: String!): User
  logout: String
  register(data: RegisterInput!): User!
  unassignTaskToUser(taskId: Float!, userEmail: String!): Task!
  updateSubtask(data: SubtaskInput!, subtaskId: Float!): Subtask!
  updateTask(data: TaskInput!, id: Float!): Task!
}

type Query {
  me: User
  subtask(subtaskId: Float!): Subtask!
  subtasks(taskId: Float!): [Subtask!]!
  task(id: Float!): Task!
  tasks(filters: TaskFilters): [Task!]!
  users(data: SearchUserInput!): [User!]!
}

input RegisterInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""User access role"""
enum role {
  ADMIN
  USER
}

input SearchUserInput {
  email: String!
}

type Subtask {
  createdBy: User!
  id: Int!
  isCompleted: Boolean!
  parentTask: Task!
  title: String!
}

input SubtaskInput {
  isCompleted: Boolean!
  title: String!
}

type Task {
  assignedTo: [User!]!
  createdBy: User!
  dateCreated: DateTime!
  dateDue: DateTime
  description: String
  id: Int!
  isCompleted: Boolean!
  isImportant: Boolean!
  subtasks: [Subtask!]!
  title: String!
}

input TaskFilters {
  dateAscending: Boolean
  dateDue: DateTime
  dateDueOperator: taskFiltersDateOperator
  isCompleted: Boolean
  isImportant: Boolean
  taskOwner: taskFiltersOwner
  title: String
}

"""Filter dates by value"""
enum taskFiltersDateOperator {
  EQUAL
  GREATER_THAN
  LESS_THAN
}

"""Filter dates by value"""
enum taskFiltersOwner {
  USER_ASSIGNED
  USER_CREATED
}

input TaskInput {
  dateDue: DateTime
  description: String
  isCompleted: Boolean!
  isImportant: Boolean!
  title: String!
}

type User {
  authCount: Float
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  name: String!
  role: role!
}
